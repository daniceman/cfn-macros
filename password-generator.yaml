Description: >
  This stack sets up a Lambda function as a password generating CFN macro.
Resources:
  MacroFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MacroFunctionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LogWriter
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Join [":", ["arn", "aws", "logs", !Ref "AWS::Region", !Ref "AWS::AccountId", "*"]]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - Logs:PutLogEvents
                Resource: !Join [":", ["arn", "aws", "logs", !Ref "AWS::Region", !Ref "AWS::AccountId", "log-group", "*"]]
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: !Join [":", ["arn", "aws", "ssm", !Ref "AWS::Region", !Ref "AWS::AccountId", "*"]]
  MacroFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          import string, random, boto3

          ssm = boto3.client('ssm')

          def handler(event, context):
            key = event['params']['Key']
            length = event['params']['Length']
            passphrase = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
            ssm.put_parameter(
              Name=key,
              Value=passphrase,
              Type='SecureString',
              Description='Random passphrase generated by the "PasswordGenerator" Cloudformation macro'
            )
            return {'requestId': event['requestId'], 'status': 'success', 'fragment': passphrase}

      FunctionName: PasswordGeneratorMacro
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt MacroFunctionRole.Arn
      Runtime: 'python3.6'
      Timeout: 5
  Macro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Description: >
        This Macro generates a random password, stores it in SSM and inserts it
        back into the calling template.
        It requires the parameter 'Length' to be set to a numeric value and the
        parameter 'Key' to specify an unused key in SSM to store the new
        password.
      FunctionName: !Ref MacroFunction
      Name: PasswordGenerator
